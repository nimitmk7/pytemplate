
# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/jobs-steps/#jobs-overview & https://circleci.com/docs/configuration-reference/#jobs
jobs:
  say-hello:
    # Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/executor-intro/ & https://circleci.com/docs/configuration-reference/#executor-job
    docker:
      # Specify the version you desire here
      # See: https://circleci.com/developer/images/image/cimg/base
      - image: cimg/python:3.12

    # Add steps to the job
    # See: https://circleci.com/docs/jobs-steps/#steps-overview & https://circleci.com/docs/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout
      - run:
          name: "Say hello"
          command: "echo Hello, World!"
  build_and_test:
    docker:
      - image: cimg/python:3.12
    # Set PYTHONPATH to the repository root so that the src package is recognized
    environment:
      PYTHONPATH: .
    steps:
      - checkout
      - run:
          name: Installing UV
          command: curl -LsSf https://astral.sh/uv/install.sh | sh
      - run:
          name: Create virtual environment
          command: uv venv .venv
      - run:
          name: Install dev dependencies
          command: |
            source .venv/bin/activate
            uv pip install -e .[dev]
            uv pip install ./src/ai_conversation_client_impl
            uv pip install ./src/ai_conversation_client  

      - run: 
          name: Check code formatting(ruff)
          command: |
            source .venv/bin/activate
            uvx ruff check .
      - run: 
          name: Run static analuysis(mypy)
          command: |
            source .venv/bin/activate
            uvx mypy src/
      - run:
          name: Run tests
          command: |
            source .venv/bin/activate
            mkdir -p test-results
            pytest src --cov=src --cov-report=xml --cov-report=term --junitxml=test-results/junit.xml
            coverage html -d coverage-unit
      - run:
          name: Enforce Coverage Threshold
          command: |
            source .venv/bin/activate
            coverage report --fail-under=90
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results
          destination: test-results
      - store_artifacts:
          path: coverage-unit
          destination: coverage-unit

workflows:
  build-workflow: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build_and_test
